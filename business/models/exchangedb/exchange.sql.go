// Code generated by sqlc. DO NOT EDIT.
// source: exchange.sql

package exchangedb

import (
	"context"
)

const create = `-- name: Create :one
insert into exchange (discord_id, base)
values ($1, $2) returning id, discord_id, base
`

type CreateParams struct {
	DiscordID string `json:"discord_id"`
	Base      string `json:"base"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (Exchange, error) {
	row := q.db.QueryRowContext(ctx, create, arg.DiscordID, arg.Base)
	var i Exchange
	err := row.Scan(&i.ID, &i.DiscordID, &i.Base)
	return i, err
}

const find = `-- name: Find :one
select base
from exchange
where discord_id = $1
`

func (q *Queries) Find(ctx context.Context, discordID string) (string, error) {
	row := q.db.QueryRowContext(ctx, find, discordID)
	var base string
	err := row.Scan(&base)
	return base, err
}

const insert = `-- name: Insert :exec
insert into exchange (discord_id, base)
values ($1, $2) on conflict (discord_id)
do
update
    set base = $2
`

type InsertParams struct {
	DiscordID string `json:"discord_id"`
	Base      string `json:"base"`
}

func (q *Queries) Insert(ctx context.Context, arg InsertParams) error {
	_, err := q.db.ExecContext(ctx, insert, arg.DiscordID, arg.Base)
	return err
}

const update = `-- name: Update :exec
update exchange
set base = $1
where discord_id = $1
`

func (q *Queries) Update(ctx context.Context, base string) error {
	_, err := q.db.ExecContext(ctx, update, base)
	return err
}
